#+TITLE: Xmonad Hacking Notes

* Better GridSelect
** Have a graphviz-layout tag graph of windows
*** PROCESS
**** As a separate module that's imported
     - Create the module first
     - only add a dumb hook from 
**** Dump text to a secondary program
**** Devel the program to pop-up what I want
**** integrate back into my xmonad
*** get the graph
    - [X] Dump the untagged list of windows
      - GridSelect sources:
         #+begin_src hs
         windowMap :: X [(String,Window)]
         windowMap = do
             ws <- gets windowset
             wins <- mapM keyValuePair (W.allWindows ws)
             return wins
          where keyValuePair w = flip (,) w `fmap` decorateName' w

         decorateName' :: Window -> X String
         decorateName' w = do
           fmap show $ getName w
         #+end_src hs
        
    - [X] Pipe to a test program
      That's simple enough for later, right now, use a dumb text file.
      ~/input.txt

    - [ ] Write a separate test program to draw the graph.
      
*** cairo render to a pixmap
    Current conflict: I'm using a pango setup that has its own
    widgets.  But, I can't do the layout I want with the gtk widget
    layouts.  So, can I use pango for drawing the text directly on a
    cairo canvas?

*** display the pixmap

** APIs
*** Widget Layout
*** Canvas
    [[http://hackage.haskell.org/package/gtk-0.12.5.7/docs/Graphics-UI-Gtk-Misc-DrawingArea.html#t:DrawingArea][Docs: DrawingArea]]
**** Cairo
     [[http://localhost:8080/gtk-0.12.5.7/html/Graphics-UI-Gtk-Cairo.html][Graphics.UI.Gtk.Cairo Docs]]
     The Cairo Render monad can be used with Gtk.Cairo 
     Color is controlled with setSourceColor
**** Pango Drawing in Cairo
     [[http://localhost:8080/pango-0.12.5.3/html/Graphics-Rendering-Pango-Cairo.html][G.R.Pango.Cairo Docs]]
***** Font
      PangoAttribute
***** Number of lines
      Depends on text width vs layout width.
      Only goes > 1 when Ellipsize* is enabled.
      
